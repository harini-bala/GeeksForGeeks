//brute force solution using nestedloop

import java.util.* ;
import java.io.*; 

public class Solution {
	public static long maxSubarraySum(int[] arr, int n) {
	     int maxi=0; 
		 for(int i=0;i<=n;i++){
			 for(int j=i;j<n;j++){
				 int sum=0;
				 for(int k=i;k<=j;k++){
					 sum= sum+arr[k];
				 }	
				  maxi=Math.max(maxi,sum);
			 }
		 }
		  return maxi; 
	}
}
//better solution by reducing the time complexity to O(n^2)

import java.util.* ;
import java.io.*; 

public class Solution {
	public static long maxSubarraySum(int[] arr, int n) {
	     int maxi=0; 
		 for(int i=0;i<n;i++){
			 int sum=0;
			 for(int j=i;j<n;j++){
					sum= sum+arr[j];
			 }
		     maxi=Math.max(maxi,sum);
		 }
		  return maxi; 
	}
}

//optimal sol by  Kadane's Algorithm 

//brute force solution using nestedloop

import java.util.* ;
import java.io.*; 

public class Solution {
	public static long maxSubarraySum(int[] arr, int n) {
	     int maxi=0; 
		 for(int i=0;i<=n;i++){
			 for(int j=i;j<n;j++){
				 int sum=0;
				 for(int k=i;k<=j;k++){
					 sum= sum+arr[k];
				 }	
				  maxi=Math.max(maxi,sum);
			 }
		 }
		  return maxi; 
	}
}
//better solution by reducing the time complexity to O(n^2)

import java.util.* ;
import java.io.*; 

public class Solution {
	public static long maxSubarraySum(int[] arr, int n) {
	     int maxi=0; 
		 for(int i=0;i<n;i++){
			 int sum=0;
			 for(int j=i;j<n;j++){
					sum= sum+arr[j];
			 }
		     maxi=Math.max(maxi,sum);
		 }
		  return maxi; 
	}
}

//optimal sol by  Kadane's Algorithm 

//brute force solution using nestedloop

import java.util.* ;
import java.io.*; 

public class Solution {
	public static long maxSubarraySum(int[] arr, int n) {
	     int maxi=0; 
		 for(int i=0;i<=n;i++){
			 for(int j=i;j<n;j++){
				 int sum=0;
				 for(int k=i;k<=j;k++){
					 sum= sum+arr[k];
				 }	
				  maxi=Math.max(maxi,sum);
			 }
		 }
		  return maxi; 
	}
}
//better solution by reducing the time complexity to O(n^2)

import java.util.* ;
import java.io.*; 

public class Solution {
	public static long maxSubarraySum(int[] arr, int n) {
	     int maxi=0; 
		 for(int i=0;i<n;i++){
			 int sum=0;
			 for(int j=i;j<n;j++){
					sum= sum+arr[j];
			 }
		     maxi=Math.max(maxi,sum);
		 }
		  return maxi; 
	}
}

//optimal sol by  Kadane's Algorithm 

class Solution {
    public int maxSubArray(int[] nums) {
        int sum=0,maxi=nums[0];
        for(int i=0;i<nums.length;i++){
            sum=sum+nums[i];
            if(sum<0)
            sum=0;
            else if(sum>maxi)
            maxi=sum;
            else
            continue;
        }
        return maxi;
    }
}
